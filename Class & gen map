import sys
import pygame
import os
import random

def load_image(name):
    image = pygame.image.load(name)
    return image

class Object():
    # constructeur
    def __init__(self, pos_x, etage, image):

        #initialisation et affectation d'attribut
        self.image = load_image(image)
        self.rect = pygame.Rect(pos_x, etage, 25, 25)

    def get_rect(self):
        return self.rect

    def get_img(self):
        return self.image

class Personnage(Object):
    def __init__(self, pos_x, etage, image, hp, Shield):
        Object.__init__(self, pos_x, etage, image)

    def get_hp(self):
        return self.hp

    def set_hp(self, val):
        self.hp = val

    def get_shield(self):
        return self.Shield

    #/!\ conditions a controler
    def update_shield(self):
        self.Shield = !self.Shield

    def deplacement(self):
        self.pos_x = self.pos_x
        #TODO

    #TODO interraction objet
    def alive(self):
        if Personnage.get_hp==0:
            sys.exit()
            print "GAME OVER"

class Pics(Object):
    def __init__(self, pos_x, etage):
        Object.__init__(self, pos_x, etage, "assets/Pics.png")
    def damage(Personnage):
        if Personnage.get_shield!=True :
            Personnage.update_shield
        else :
            Personnage.set_hp(get_hp-1)

class Heart(Object):
    def __init__(self, pos_x, etage):
        Objet.__init__(self, pos_x, etage, "assets/Heart.png")

    def heal(Personnage):
        if Personnage.get_hp<3:
            Personnage.set_hp(Personnage.get_hp+1)
            self.pos_x =6666
            self.etage =6666


class Block(Object):
    def __init__(self, pos_x, etage):
        objet.__init__(self, pos_x, etage, "assets/Block.png")

class Passerelle(Object):
    def __init__(self, pos_x, etage):
        objet.__init__(self, pos_x, etage, "assets/Passerelle.png")

class End(Object):
    def __init__(self, pos_x, etage):
        Object.__init__(self, pos_x, etage, "assets/End.png")
    #TODO interraction

class Shield(Object):
    def __init__(self, pos_x, etage):
        Object.__init__(self, pos_x, etage, "assets/Shield.png")

    def defense(Personnage):
        if Personnage.get_shield==False:
            Personnage.update_shield


def display(Pics):
    screen.blit(background_image, background_position)
    screen.blit(Pics.get_img(), Pics.get_rect())

    pygame.display.flip()
    screen.blit
	pygame.time.wait(15)

#TODO genDrop & gen
def genDrop(map[k][j]):
    #générateur d'objet
    rand=random.randint(0,9)
    if rand == 3 :
        #Heart
    elif rand == 7 :
        #Shield
    elif rand == 1 && rand == 5 && rand == 9 :
        #Pics

def gen():
    #générateur de map
    map = array([[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2]])
    #création map sur i étage
    j=0
    while j < 3:
        k=0
        while k<12:
            rand = random.randint(0,4)
            if rand == 1 && rand == 3 :
                #création Block
                map[k][j]=Block(k,j)
                genDrop(map[k][j])
            elif rand == 2 && rand == 4 :
                #création Passerelle
                map[k][j]=Passerelle(k,j)
                genDrop(map[k][j])
            k=k+1
        j=j+1
    map[0][0]=Block(0,0)
    map[11][0]=Block(11,0)



def game_loop():
    #création map
    gen()
    #création personnages
    joueur= Personnage(0,0,"",3,False)
    IA = Personnage(11,0,"",3,False)
    
    #boucle de jeu
    while 1:

        joueur.alive(self)
        for event in pygame.event.get():
        	if event.type == pygame.QUIT:
        	    sys.exit()

        
        #Déplacement

        #Calculs


        #Affichage

###########################################################

# initialise les modules pygame
pygame.init()

# Affiche la fenetre
os.environ['SDL_VIDEO_CENTERED'] = '1'
size = width, height = 640, 480
screen = pygame.display.set_mode(size)

#initialisation Musique

#chargement Acceuil

#lancement boucle de jeu
game_loop();
